name: firmwareBuild

on:
  push:
    branches: [stable, testing, develop]
  pull_request:
    branches: [stable, testing, develop]
  repository_dispatch:
    types: [frontend-build-completed]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build'
        required: true
        default: 'develop'
        type: choice
        options:
          - stable
          - testing
          - develop

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        soc: [esp8266, esp32, esp32c3]
        release: [0, 1]
        single: [0, 1]

    steps:
      - name: Determine branch
        id: get_branch
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "branch=${{ github.event.inputs.branch }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "push" ]; then
            echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "branch=${{ github.head_ref }}" >> $GITHUB_OUTPUT
          else
            echo "branch=develop" >> $GITHUB_OUTPUT
          fi

      - name: Sanitize branch name for artifact
        id: sanitize_branch
        run: |
          # Get the original branch name
          BRANCH="${{ steps.get_branch.outputs.branch }}"
          
          # Replace forward slashes with hyphens
          SANITIZED_BRANCH=${BRANCH//\//-}
          
          # Replace other problematic characters
          SANITIZED_BRANCH=${SANITIZED_BRANCH//\\/-}
          SANITIZED_BRANCH=${SANITIZED_BRANCH//\?/-}
          SANITIZED_BRANCH=${SANITIZED_BRANCH//\:/-}
          SANITIZED_BRANCH=${SANITIZED_BRANCH//\*/-}
          SANITIZED_BRANCH=${SANITIZED_BRANCH//\"/-}
          SANITIZED_BRANCH=${SANITIZED_BRANCH//\</-}
          SANITIZED_BRANCH=${SANITIZED_BRANCH//\>/-}
          SANITIZED_BRANCH=${SANITIZED_BRANCH//\|/-}
          
          echo "sanitized_branch=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.get_branch.outputs.branch }}
          fetch-depth: 0

      - name: Get firmware version
        id: get_fw_info
        run: |
          branch="${{ steps.get_branch.outputs.branch }}"
          build_num=${{ github.run_number }}
          version="V5.0-${build_num}-${branch}"
          echo "fw_version=$version" >> $GITHUB_OUTPUT
          echo "fw_branch=$branch" >> $GITHUB_OUTPUT

      - name: Synchronize submodules
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive

      - name: Pull Docker Image
        run: docker pull docker.io/pjakobs/sming:latest

      - name: Download fileList.h artifact
        run: |
          if [ -f ./include/fileList.h ]; then
            echo "removing fileList.h"
            rm ./include/fileList.h
          fi
          artifact_url=https://pljakobs.github.io/esp_rgb_webapp2/fileList.h
          curl -L -o fileList.h "$artifact_url"
          mv fileList.h ./include

      - name: Download webapp files artifact
        run: |
          if [ -d ./webapp ]; then
            echo "removing and re-creating webapp directory"
            rm -rf ./webapp
            mkdir ./webapp
          fi
          artifact_url=https://pljakobs.github.io/esp_rgb_webapp2/spa-files.zip
          curl -L -o spa-files.zip "$artifact_url"
          unzip spa-files.zip -d ./webapp
          mv ./webapp/dist/spa/* ./webapp
          rm -rf ./webapp/dist/spa
          echo "webapp files version"
          cat ./webapp/VERSION

      - name: Build partition map (ESP8266 only)
        if: ${{ matrix.soc == 'esp8266' }}
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace \
            docker.io/pjakobs/sming:latest \
            bash -c "git config --global --add safe.directory /workspace && \
               source /opt/Sming/Tools/export.sh && \
               make partmap-build SMING_SOC=${{ matrix.soc }} SMING_RELEASE=${{ matrix.release }}"

      - name: Run Build in Docker Container
        run: |
          if [ "${{ matrix.single }}" = "0" ]; then 
            docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace \
              -e GITHUB_RUN_NUMBER=${{ github.run_number }} \
              docker.io/pjakobs/sming:latest \
              bash -c "git config --global --add safe.directory /workspace && \
              source /opt/Sming/Tools/export.sh && \
              make configdb-rebuild && \
              make SMING_SOC=${{ matrix.soc }} SMING_RELEASE=${{ matrix.release }} DISABLE_WERROR=1 COM_SPEED=115200" 
          else 
            docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace \
              -e GITHUB_RUN_NUMBER=${{ github.run_number }} \
              docker.io/pjakobs/sming:latest \
              bash -c "git config --global --add safe.directory /workspace && \
              source /opt/Sming/Tools/export.sh && \
              make configdb-rebuild && \
              make mergeflash SMING_SOC=${{ matrix.soc }} SMING_RELEASE=${{ matrix.release }} DISABLE_WERROR=1 COM_SPEED=115200" 
          fi

      - name: Set firmware path
        id: set_firmware_path
        run: |
          if [ "${{ matrix.soc }}" = "esp8266" ] && [ "${{ matrix.release }}" = "0" ] && [ "${{ matrix.single }}" = "0" ]; then
            echo "path=out/Esp8266/debug/firmware/rom0.bin" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.soc }}" = "esp8266" ] && [ "${{ matrix.release }}" = "1" ] && [ "${{ matrix.single }}" = "0" ]; then
            echo "path=out/Esp8266/release/firmware/rom0.bin" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.soc }}" = "esp32" ] && [ "${{ matrix.release }}" = "0" ] && [ "${{ matrix.single }}" = "0" ]; then
            echo "path=out/Esp32/esp32/debug/firmware/app.bin" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.soc }}" = "esp32" ] && [ "${{ matrix.release }}" = "1" ] && [ "${{ matrix.single }}" = "0" ]; then
            echo "path=out/Esp32/esp32/release/firmware/app.bin" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.soc }}" = "esp32c3" ] && [ "${{ matrix.release }}" = "0" ] && [ "${{ matrix.single }}" = "0" ]; then
            echo "path=out/Esp32/esp32c3/debug/firmware/app.bin" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.soc }}" = "esp32c3" ] && [ "${{ matrix.release }}" = "1" ] && [ "${{ matrix.single }}" = "0" ]; then
            echo "path=out/Esp32/esp32c3/release/firmware/app.bin" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.soc }}" = "esp8266" ] && [ "${{ matrix.release }}" = "0" ] && [ "${{ matrix.single }}" = "1" ]; then
            echo "path=out/Esp8266/debug/firmware/app-merged.bin" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.soc }}" = "esp8266" ] && [ "${{ matrix.release }}" = "1" ] && [ "${{ matrix.single }}" = "1" ]; then
            echo "path=out/Esp8266/release/firmware/app-merged.bin" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.soc }}" = "esp32" ] && [ "${{ matrix.release }}" = "0" ] && [ "${{ matrix.single }}" = "1" ]; then
            echo "path=out/Esp32/esp32/debug/firmware/app-merged.bin" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.soc }}" = "esp32" ] && [ "${{ matrix.release }}" = "1" ] && [ "${{ matrix.single }}" = "1" ]; then
            echo "path=out/Esp32/esp32/release/firmware/app-merged.bin" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.soc }}" = "esp32c3" ] && [ "${{ matrix.release }}" = "0" ] && [ "${{ matrix.single }}" = "1" ]; then
            echo "path=out/Esp32/esp32c3/debug/firmware/app-merged.bin" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.soc }}" = "esp32c3" ] && [ "${{ matrix.release }}" = "1" ] && [ "${{ matrix.single }}" = "1" ]; then
            echo "path=out/Esp32/esp32c3/release/firmware/app-merged.bin" >> $GITHUB_OUTPUT
          else
            echo "path=" >> $GITHUB_OUTPUT
          fi

      - name: Set artifact name
        id: set_artifact_name
        run: |
          if [ "${{ matrix.single }}" = "1" ]; then
            tag="-single_image"
          else
            tag=""
          fi
          if [ "${{ matrix.release }}" = "1" ]; then
            echo "artifact_name=lightinator-${{ matrix.soc }}-release${tag}-${{ steps.sanitize_branch.outputs.sanitized_branch }}" >> $GITHUB_OUTPUT
          else
            echo "artifact_name=lightinator-${{ matrix.soc }}-debug${tag}-${{ steps.sanitize_branch.outputs.sanitized_branch }}" >> $GITHUB_OUTPUT
          fi

      - name: Upload firmware artifact
        if: ${{ steps.set_firmware_path.outputs.path != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set_artifact_name.outputs.artifact_name }}
          path: ${{ steps.set_firmware_path.outputs.path }}
          
      - name: Create version info file
        run: |
          echo "fw_version=${{ steps.get_fw_info.outputs.fw_version }}" > version-info.txt
          echo "fw_branch=${{ steps.get_branch.outputs.sanitized_branch }}" >> version-info.txt
        
      - name: Save version info
        # Only upload version info from one specific matrix combination to avoid conflicts
        if: ${{ matrix.soc == 'esp8266' && matrix.release == 0 && matrix.single == 0 }}
        uses: actions/upload-artifact@v4
        with:
          name: version-info-${{ steps.get_branch.outputs.sanitized_branch }}
          path: version-info.txt