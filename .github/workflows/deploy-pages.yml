name: Publish_Firmware
on:
  workflow_run:
    workflows: ["build_application"]
    types: [completed]
  workflow_dispatch:

jobs:
  get-version:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get firmware version and branch
        id: get_fw_info
        run: |
          version="$(git describe --abbrev=4 --dirty --always --tags)"
          branch=$(git rev-parse --abbrev-ref HEAD)
          echo "fw_version=$version" 
          echo "fw_branch=$branch" 
          echo "fw_version=$version" >> $GITHUB_ENV
          echo "fw_branch=$branch" >> $GITHUB_ENV
          echo "fw_version=$version" >> $GITHUB_OUTPUT
          echo "fw_branch=$branch" >> $GITHUB_OUTPUT
          echo "::set-output name=fw_version::$version"
          echo "::set-output name=fw_branch::$branch"

    outputs:
      fw_version: ${{ steps.get_fw_info.outputs.fw_version }}
      fw_branch: ${{ steps.get_fw_info.outputs.fw_branch }}

  publish:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    needs: get-version

    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v2
        with:
          ref: gh-pages

      - name: Debug Outputs in publish
        run: |
          echo "fw_branch=${{ needs.get-version.outputs.fw_branch }}"
          echo "fw_version=${{ needs.get-version.outputs.fw_version }}"

      - name: Get Latest Successful Workflow Run
        id: get_run
        run: |
          latest_run_id=$(curl -s -H "Authorization: token ${{ secrets.artifact_download_token }}" \
            "https://api.github.com/repos/pljakobs/esp_rgbww_firmware/actions/runs?status=success" | \
            jq -r '.workflow_runs[] | select(.name == "build_application") | .id' | head -n 1)
          echo "latest_run_id=$latest_run_id" >> $GITHUB_ENV

      - name: Create directories
        run: |
          mkdir -p download/esp8266/${{ needs.get-version.outputs.fw_branch }}/debug
          mkdir -p download/esp8266/${{ needs.get-version.outputs.fw_branch }}/release
          mkdir -p download/esp32/${{ needs.get-version.outputs.fw_branch }}/debug
          mkdir -p download/esp32/${{ needs.get-version.outputs.fw_branch }}/release
          mkdir -p download/esp32c3/${{ needs.get-version.outputs.fw_branch }}/debug
          mkdir -p download/esp32c3/${{ needs.get-version.outputs.fw_branch }}/release

      - name: Download esp8266 debug
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.artifact_download_token }}
          run-id: ${{ env.latest_run_id }}
          name: lightinator-esp8266-debug
          path: download/esp8266/${{ needs.get-version.outputs.fw_branch }}/debug

      - name: Download esp8266 release
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.artifact_download_token }}
          run-id: ${{ env.latest_run_id }}
          name: lightinator-esp8266-release
          path: download/esp8266/${{ needs.get-version.outputs.fw_branch }}/release

      - name: Download esp32 debug
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.artifact_download_token }}
          run-id: ${{ env.latest_run_id }}
          name: lightinator-esp32-debug
          path: download/esp32/${{ needs.get-version.outputs.fw_branch }}/debug

      - name: Download esp32 release
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.artifact_download_token }}
          run-id: ${{ env.latest_run_id }}
          name: lightinator-esp32-release
          path: download/esp32/${{ needs.get-version.outputs.fw_branch }}/release

      - name: Download esp32c3 debug
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.artifact_download_token }}
          run-id: ${{ env.latest_run_id }}
          name: lightinator-esp32c3-debug
          path: download/esp32c3/${{ needs.get-version.outputs.fw_branch }}/debug

      - name: Download esp32c3 release
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.artifact_download_token }}
          run-id: ${{ env.latest_run_id }}
          name: lightinator-esp32c3-release
          path: download/esp32c3/${{ needs.get-version.outputs.fw_branch }}/release

      - name: Generate version.json
        run: |
          cat <<EOF > version.json
          {
              "firmware": [
                  {
                      "soc": "esp8266",
                      "type": "debug",
                      "branch": "${{ needs.get-version.outputs.fw_branch }}",
                      "fw_version": "${{ needs.get-version.outputs.fw_version }}",
                      "files": {
                          "rom": {
                              "url": "download/esp8266/${{ needs.get-version.outputs.fw_branch }}/debug/rom0.bin"
                          }
                      }
                  },
                  {
                      "soc": "esp8266",
                      "type": "release",
                      "branch": "${{ needs.get-version.outputs.fw_branch }}",
                      "fw_version": "${{ needs.get-version.outputs.fw_version }}",
                      "files": {
                          "rom": {
                              "url": "download/esp8266/${{ needs.get-version.outputs.fw_branch }}/release/rom0.bin"
                          }
                      }
                  },
                  {
                      "soc": "esp32",
                      "type": "debug",
                      "branch": "${{ needs.get-version.outputs.fw_branch }}",
                      "fw_version": "${{ needs.get-version.outputs.fw_version }}",
                      "files": {
                          "rom": {
                              "url": "download/esp32/${{ needs.get-version.outputs.fw_branch }}/debug/app.bin"
                          }
                      }
                  },
                  {
                      "soc": "esp32",download
                      "type": "release",
                      "branch": "${{ needs.get-version.outputs.fw_branch }}",
                      "fw_version": "${{ needs.get-version.outputs.fw_version }}",
                      "files": {
                          "rom": {
                              "url": "download/esp32/${{ needs.get-version.outputs.fw_branch }}/release/app.bin"
                          }
                      }
                  },
                  {
                      "soc": "esp32c3",
                      "type": "debug",
                      "branch": "${{ needs.get-version.outputs.fw_branch }}",
                      "fw_version": "${{ needs.get-version.outputs.fw_version }}",
                      "files": {
                          "rom": {
                              "url": "download/esp32c3/${{ needs.get-version.outputs.fw_branch }}/debug/app.bin"
                          }
                      }
                  },
                  {
                      "soc": "esp32c3",
                      "type": "release",
                      "branch": "${{ needs.get-version.outputs.fw_branch }}",
                      "fw_version": "${{ needs.get-version.outputs.fw_version }}",
                      "files": {
                          "rom": {
                              "url": "download/esp32c3/${{ needs.get-version.outputs.fw_branch }}/release/app.bin"
                          }
                      }
                  }
              ],
              "rom": {
                  "fw_version": "${{ needs.get-version.outputs.fw_version }}",
                  "url": "download/esp8266/${{ needs.get-version.outputs.fw_branch }}/release/rom0.bin"
              },
              "spiffs": {
                  "webapp_version": "0.3.3",
                  "url": "http://rgbww.dronezone.de/testing/spiff_rom.bin"
              }
          }
          EOF

      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Publish firmware artifacts and JSON" || echo "No changes to commit"
          git push origin gh-pages

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - name: configure variables
        run: |
          echo "deploy_user=github-deploy" >> $GITHUB_ENV
          echo "deploy_server=lightinator.de" >> $GITHUB_ENV
          echo "deploy_path=~/nginx/html" >> $GITHUB_ENV          
          echo "fw_branch=${{ needs.get-version.outputs.fw_branch }}" >> $GITHUB_ENV

      - name: Add server to known_hosts
        run: |
          ssh-keyscan ${{ env.deploy_server }} >> ~/.ssh/known_hosts

      - name: Deploy to External Server
        run: |
          scp -r download/esp8266 ${{ env.deploy_user }}@${{ env.deploy_server }}:${{ env.deploy_path }}/download/
          scp -r download/esp32 ${{ env.deploy_user }}@${{ env.deploy_server }}:${{ env.deploy_path }}/download/
          scp -r download/esp32c3 ${{ env.deploy_user }}@${{ env.deploy_server }}:${{ env.deploy_path }}/download/
          scp version.json ${{ env.deploy_user }}@${{ env.deploy_server }}:${{ env.deploy_path }}/

      - name: Change ownership of uploaded files
        run: |
          ssh ${{ env.deploy_user }}@${{ env.deploy_server }} "chown -R github-deploy:nginx ${{ env.deploy_path }}/*"
